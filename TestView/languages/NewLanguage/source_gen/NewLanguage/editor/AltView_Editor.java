package NewLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.BoxLayout;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.awt.FlowLayout;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import javax.swing.JButton;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import javax.swing.JLabel;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import jetbrains.mps.smodel.action.NodeFactoryManager;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.nodeEditor.cellMenu.DefaultReferenceSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;

public class AltView_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_k73x5b_a(editorContext, node);
  }

  private EditorCell createCollection_k73x5b_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_k73x5b_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createJComponent_k73x5b_a0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_k73x5b_b0(editorContext, node));
    editorCell.addEditorCell(this.createRefNodeList_k73x5b_c0(editorContext, node));
    return editorCell;
  }

  private EditorCell createJComponent_k73x5b_a0(EditorContext editorContext, SNode node) {
    EditorCell editorCell = EditorCell_Component.createComponentCell(editorContext, node, AltView_Editor._QueryFunction_JComponent_k73x5b_a0a(node, editorContext), "_k73x5b_a0");
    editorCell.setCellId("JComponent_k73x5b_a0");
    return editorCell;
  }

  private static JComponent _QueryFunction_JComponent_k73x5b_a0a(final SNode node, final EditorContext editorContext) {
    JPanel view = new JPanel();

    view.setLayout(new BoxLayout(view, BoxLayout.Y_AXIS));


    for (SNode row : ListSequence.fromList(SLinkOperations.getTargets(node, "rows", true))) {
      JPanel rowPanel = new JPanel(new FlowLayout());

      for (SNode elem : ListSequence.fromList(SLinkOperations.getTargets(row, "elements", true))) {
        {
          SNode button = elem;
          if (SNodeOperations.isInstanceOf(button, "NewLanguage.structure.Button")) {
            rowPanel.add(new JButton("<html>" + SPropertyOperations.getString(button, "text") + "</html>"));
          }
        }
        {
          SNode label = elem;
          if (SNodeOperations.isInstanceOf(label, "NewLanguage.structure.Label")) {
            rowPanel.add(new JLabel("<html>" + SPropertyOperations.getString(label, "text") + "</html>"));
          }
        }
      }

      view.add(rowPanel);
    }


    return view;
  }

  private EditorCell createConstant_k73x5b_b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_k73x5b_b0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createRefNodeList_k73x5b_c0(EditorContext editorContext, SNode node) {
    AbstractCellListHandler handler = new AltView_Editor.rowsListHandler_k73x5b_c0(node, "rows", editorContext);
    EditorCell_Collection editorCell = handler.createCells(editorContext, new CellLayout_Vertical(), false);
    editorCell.setCellId("refNodeList_rows");
    editorCell.setRole(handler.getElementRole());
    return editorCell;
  }

  private static class rowsListHandler_k73x5b_c0 extends RefNodeListHandler {
    public rowsListHandler_k73x5b_c0(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }

    public SNode createNodeToInsert(EditorContext editorContext) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, editorContext, super.getElementRole());
    }

    public EditorCell createNodeCell(EditorContext editorContext, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(editorContext, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, editorContext);
      return elementCell;
    }

    public EditorCell createEmptyCell(EditorContext editorContext) {
      EditorCell emptyCell = null;
      emptyCell = super.createEmptyCell(editorContext);
      this.installElementCellActions(super.getOwner(), null, emptyCell, editorContext);
      return emptyCell;
    }

    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext editorContext) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        if (elementNode != null) {
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultReferenceSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), editorContext));
        }
      }
    }
  }
}
