package NewLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import javax.swing.JComponent;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.editor.table.runtime.TableModelFactory;
import jetbrains.mps.lang.editor.table.runtime.TableModel;
import jetbrains.mps.lang.editor.table.runtime.AbstractTableModel;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.editor.table.runtime.EditorCell_Table;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import jetbrains.mps.smodel.action.NodeFactoryManager;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.nodeEditor.cellMenu.DefaultReferenceSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;

public class GUI_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_pev7a0_a(editorContext, node);
  }

  private EditorCell createCollection_pev7a0_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_pev7a0_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createConstant_pev7a0_a0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_pev7a0_b0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_pev7a0_c0(editorContext, node));
    return editorCell;
  }

  private EditorCell createConstant_pev7a0_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "GUI");
    editorCell.setCellId("Constant_pev7a0_a0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createProperty_pev7a0_b0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("name");
    provider.setNoTargetText("<no name>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_name");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  private EditorCell createCollection_pev7a0_c0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_pev7a0_c0");
    editorCell.addEditorCell(this.createJComponent_pev7a0_a2a(editorContext, node));
    editorCell.addEditorCell(this.createTable_pev7a0_b2a(editorContext, node));
    editorCell.addEditorCell(this.createRefNodeList_pev7a0_c2a(editorContext, node));
    return editorCell;
  }

  private EditorCell createJComponent_pev7a0_a2a(EditorContext editorContext, SNode node) {
    EditorCell editorCell = EditorCell_Component.createComponentCell(editorContext, node, GUI_Editor._QueryFunction_JComponent_pev7a0_a0c0(node, editorContext), "_pev7a0_a2a");
    editorCell.setCellId("JComponent_pev7a0_a2a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);
    editorCell.getStyle().putAll(style);
    return editorCell;
  }

  private static JComponent _QueryFunction_JComponent_pev7a0_a0c0(final SNode node, final EditorContext editorContext) {
    JButton button = new JButton();

    button.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        SPropertyOperations.set(node, "name", "clicked");
      }
    });


    return button;
  }

  private EditorCell createTable_pev7a0_b2a(EditorContext editorContext, SNode node) {
    TableModelFactory creator = new TableModelFactory() {
      public TableModel createTableModel(final SNode node, final EditorContext editorContext) {
        return new AbstractTableModel() {


          @Override
          public SNode getValueAt(int row, int column) {
            if (ListSequence.fromList(SLinkOperations.getTargets(node, "rows", true)).count() >= row) {
              if (ListSequence.fromList(SLinkOperations.getTargets(ListSequence.fromList(SLinkOperations.getTargets(node, "rows", true)).getElement(row), "elements", true)).count() >= column) {
                return ListSequence.fromList(SLinkOperations.getTargets(ListSequence.fromList(SLinkOperations.getTargets(node, "rows", true)).getElement(row), "elements", true)).getElement(column);
              }
            }

            return null;
          }




          @Override
          public int getColumnCount() {
            int max = 0;
            for (SNode row : ListSequence.fromList(SLinkOperations.getTargets(node, "rows", true))) {
              if (ListSequence.fromList(SLinkOperations.getTargets(row, "elements", true)).count() > max) {
                max = ListSequence.fromList(SLinkOperations.getTargets(row, "elements", true)).count();
              }
            }
            return max;
          }



          @Override
          public int getRowCount() {
            return ListSequence.fromList(SLinkOperations.getTargets(node, "rows", true)).count();
          }



          @Override
          public void createElement(int row, int column) {
            ListSequence.fromList(SLinkOperations.getTargets(ListSequence.fromList(SLinkOperations.getTargets(node, "rows", true)).getElement(row), "elements", true)).setElement(column, SNodeFactoryOperations.createNewNode("NewLanguage.structure.GUIElement", null));
          }



          @Override
          public void insertColumn(int columnNumber) {
            if (columnNumber < 0) {
              return;
            }

            for (SNode row : ListSequence.fromList(SLinkOperations.getTargets(node, "rows", true))) {
              ListSequence.fromList(SLinkOperations.getTargets(row, "elements", true)).insertElement(columnNumber - 1, SNodeFactoryOperations.createNewNode("NewLanguage.structure.GUIElement", null));
            }


          }
        };
      }
    };
    jetbrains.mps.openapi.editor.cells.EditorCell_Collection editorCell = EditorCell_Table.createTable(editorContext, node, creator.createTableModel(node, editorContext), "Table_pev7a0_b2a");
    editorCell.setCellId("Table_pev7a0_b2a_0");
    return editorCell;
  }

  private EditorCell createRefNodeList_pev7a0_c2a(EditorContext editorContext, SNode node) {
    AbstractCellListHandler handler = new GUI_Editor.rowsListHandler_pev7a0_c2a(node, "rows", editorContext);
    EditorCell_Collection editorCell = handler.createCells(editorContext, new CellLayout_Vertical(), false);
    editorCell.setCellId("refNodeList_rows");
    editorCell.setRole(handler.getElementRole());
    return editorCell;
  }

  private static class rowsListHandler_pev7a0_c2a extends RefNodeListHandler {
    public rowsListHandler_pev7a0_c2a(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }

    public SNode createNodeToInsert(EditorContext editorContext) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, editorContext, super.getElementRole());
    }

    public EditorCell createNodeCell(EditorContext editorContext, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(editorContext, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, editorContext);
      return elementCell;
    }

    public EditorCell createEmptyCell(EditorContext editorContext) {
      EditorCell emptyCell = null;
      emptyCell = super.createEmptyCell(editorContext);
      this.installElementCellActions(super.getOwner(), null, emptyCell, editorContext);
      return emptyCell;
    }

    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext editorContext) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        if (elementNode != null) {
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultReferenceSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), editorContext));
        }
      }
    }
  }
}
