package Singleton.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SNodePointer;

public class Singleton_Constraints extends BaseConstraintsDescriptor {
  public Singleton_Constraints() {
    super("Singleton.structure.Singleton");
  }

  @Override
  public boolean hasOwnCanBeParentMethod() {
    return true;
  }

  @Override
  public boolean canBeParent(SNode node, @Nullable SNode childNode, SNode childConcept, SNode link, IOperationContext operationContext, @Nullable CheckingNodeContext checkingNodeContext) {
    boolean result = static_canBeAParent(node, childNode, childConcept, link, operationContext);

    if (!(result) && checkingNodeContext != null) {
      checkingNodeContext.setBreakingNode(canBeParentBreakingPoint);
    }

    return result;
  }

  public static boolean static_canBeAParent(SNode node, SNode childNode, SNode childConcept, SNode link, final IOperationContext operationContext) {
    if (SNodeOperations.isInstanceOf(childNode, "jetbrains.mps.baseLanguage.structure.ConstructorDeclaration")) {
      return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget((SNodeOperations.cast(childNode, "jetbrains.mps.baseLanguage.structure.ConstructorDeclaration")), "visibility", true), "jetbrains.mps.baseLanguage.structure.PublicVisibility"));

    } else {
      return true;
    }
  }

  private static SNodePointer canBeParentBreakingPoint = new SNodePointer("r:5a8d73ab-6732-45ca-b895-32898ef1d578(Singleton.constraints)", "6109676433664762576");
}
